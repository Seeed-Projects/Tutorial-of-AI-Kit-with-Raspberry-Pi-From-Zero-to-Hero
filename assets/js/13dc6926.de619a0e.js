"use strict";(self.webpackChunktutorial_of_ai_kit=self.webpackChunktutorial_of_ai_kit||[]).push([[866],{7370:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(5893),a=t(1151);const o={},r="Car Park Solution Management with ThingsBoard",s={id:"Chapter_6-RaspberryPi_and_AIoT/Car_Park_Solution_Management_with_Thingsboard",title:"Car Park Solution Management with ThingsBoard",description:"This project delivers a custom model for detecting parking possibilities in a car park. The system identifies three classes: available slots, parked slots, and improper parking.",source:"@site/../articles/Chapter_6-RaspberryPi_and_AIoT/Car_Park_Solution_Management_with_Thingsboard.md",sourceDirName:"Chapter_6-RaspberryPi_and_AIoT",slug:"/Chapter_6-RaspberryPi_and_AIoT/Car_Park_Solution_Management_with_Thingsboard",permalink:"/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_6-RaspberryPi_and_AIoT/Car_Park_Solution_Management_with_Thingsboard",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Smart Retail with reComputerR11 and AI kit",permalink:"/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_6-RaspberryPi_and_AIoT/Smart_Retail_with_reComputerR11_and_AIkit"}},d={},l=[{value:"Step 1: Data Collection and Labeling",id:"step-1-data-collection-and-labeling",level:2},{value:"Step 2: Model Training",id:"step-2-model-training",level:2},{value:"Step 3: Deploy the Model",id:"step-3-deploy-the-model",level:2},{value:"Step 4: Install ThingsBoard and Add a Device",id:"step-4-install-thingsboard-and-add-a-device",level:2},{value:"Demo",id:"demo",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"car-park-solution-management-with-thingsboard",children:"Car Park Solution Management with ThingsBoard"}),"\n",(0,i.jsx)(n.p,{children:"This project delivers a custom model for detecting parking possibilities in a car park. The system identifies three classes: available slots, parked slots, and improper parking."}),"\n",(0,i.jsx)(n.p,{children:"The model was trained using the YOLOv8n framework and deployed on a Raspberry Pi with a Hailo-8L accelerator. The modified code enables real-time parking slot counting and sends MQTT messages to the ThingsBoard IoT platform."}),"\n",(0,i.jsx)(n.p,{children:"ThingsBoard provides an intuitive interface for data visualization and analysis, making it easy to monitor parking conditions and optimize management."}),"\n",(0,i.jsx)(n.h2,{id:"step-1-data-collection-and-labeling",children:"Step 1: Data Collection and Labeling"}),"\n",(0,i.jsx)(n.p,{children:"We created a small prototype of a car park to demonstrate the working phenomenon. Using a webcam connected to a Raspberry Pi, we collected images of the parking area. These images were then uploaded to a Roboflow repository for further processing."}),"\n",(0,i.jsx)(n.p,{children:"The images were labeled into three distinct classes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Available"}),"\n",(0,i.jsx)(n.li,{children:"Parked"}),"\n",(0,i.jsx)(n.li,{children:"Improper"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"license",src:t(1588).Z+"",width:"1911",height:"834"})}),"\n",(0,i.jsxs)(n.p,{children:["You can view the project here: ",(0,i.jsx)(n.a,{href:"https://app.roboflow.com/kasun-thushara-fxbng/car-park-cq0uw/1",children:"Car Park - Roboflow Repository"})]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-model-training",children:"Step 2: Model Training"}),"\n",(0,i.jsx)(n.p,{children:"We trained a YOLOv8n model using a custom dataset. Roboflow provides a downloadable link for the dataset, which can be used to train the model with YOLOv8n."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"license",src:t(3557).Z+"",width:"1000",height:"552"})}),"\n",(0,i.jsx)(n.p,{children:"After training, the model must be exported to the ONNX format for deployment."}),"\n",(0,i.jsx)(n.p,{children:"Detailed instructions on model labeling and training can be found in Chapter 5"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://seeed-projects.github.io/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_5-Custom_Model_Development_and_Deployment/Training_Your_Model",children:"How to training the model"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://seeed-projects.github.io/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_5-Custom_Model_Development_and_Deployment/Convert_Your_Model",children:"How to convert ONNX model to HEF"})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-deploy-the-model",children:"Step 3: Deploy the Model"}),"\n",(0,i.jsx)(n.p,{children:"On the Raspberry Pi, after installing Hailo tools, you can test if the detection is working correctly. For MQTT connection, ensure you install the required dependencies in the same virtual environment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install -y mosquitto mosquitto-clients\npip install paho-mqtt\n"})}),"\n",(0,i.jsx)(n.p,{children:"We modified the detection_pipeline.py script and renamed it as park_object_detection.py. Below is the modified code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'import gi\ngi.require_version(\'Gst\', \'1.0\')\nfrom gi.repository import Gst, GLib\nimport os\nimport numpy as np\nimport cv2\nimport hailo\nimport paho.mqtt.client as mqtt\nimport json\nfrom hailo_rpi_common import (\n    get_caps_from_pad,\n    get_numpy_from_buffer,\n    app_callback_class,\n)\nfrom detection_pipeline import GStreamerDetectionApp\n\n# -----------------------------------------------------------------------------------------------\n# User-defined class to be used in the callback function\n# -----------------------------------------------------------------------------------------------\nclass user_app_callback_class(app_callback_class):\n    def __init__(self):\n        super().__init__()\n        self.detection_counts = {\n            "available": 0,\n            "parked": 0,\n            "improper": 0\n        }\n\n    def reset_counts(self):\n        self.detection_counts = {key: 0 for key in self.detection_counts}\n\n# -----------------------------------------------------------------------------------------------\n# MQTT Setup\n# -----------------------------------------------------------------------------------------------\nBROKER = "192.168.8.195"  # Replace with your MQTT broker\'s IP address\nCLIENT_ID = "Car_Park"\nPORT = 1883\nTOPIC = "v1/devices/me/telemetry"  # Adjust to match your topic\n\nmqtt_client = mqtt.Client(CLIENT_ID)\n\ndef setup_mqtt():\n    mqtt_client.connect(BROKER, PORT, 60)\n    mqtt_client.loop_start()\n\ndef publish_counts(detection_counts):\n    payload = json.dumps(detection_counts)  # Convert counts to JSON format\n    mqtt_client.publish(TOPIC, payload, qos=1)\n    print(f"Published: {payload} to topic {TOPIC}")\n\n# -----------------------------------------------------------------------------------------------\n# User-defined callback function\n# -----------------------------------------------------------------------------------------------\ndef app_callback(pad, info, user_data):\n    buffer = info.get_buffer()\n    if buffer is None:\n        return Gst.PadProbeReturn.OK\n\n    user_data.reset_counts()\n    roi = hailo.get_roi_from_buffer(buffer)\n    detections = roi.get_objects_typed(hailo.HAILO_DETECTION)\n\n    for detection in detections:\n        label = detection.get_label()\n        if label in user_data.detection_counts:\n            user_data.detection_counts[label] += 1\n\n    publish_counts(user_data.detection_counts)\n    print(f"Detection Counts: {user_data.detection_counts}")\n\n    return Gst.PadProbeReturn.OK\n\n# -----------------------------------------------------------------------------------------------\n# Main\n# -----------------------------------------------------------------------------------------------\nif __name__ == "__main__":\n    setup_mqtt()\n    user_data = user_app_callback_class()\n    app = GStreamerDetectionApp(app_callback, user_data)\n\n    try:\n        app.run()\n    except KeyboardInterrupt:\n        print("Shutting down...")\n    finally:\n        mqtt_client.loop_stop()\n        mqtt_client.disconnect()\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-install-thingsboard-and-add-a-device",children:"Step 4: Install ThingsBoard and Add a Device"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://thingsboard.io/",children:"ThingsBoard"})," is an open-source IoT platform designed for device management, data collection, processing, and visualization. It supports various communication protocols such as ",(0,i.jsx)(n.strong,{children:"MQTT, CoAP, and HTTP"}),", making it versatile for integrating IoT devices and systems. The platform enables users to ",(0,i.jsx)(n.strong,{children:"create interactive dashboards, monitor devices in real-time, and analyze data through advanced visualization tools. With its rule engine, ThingsBoard automates workflows and event processing"}),", simplifying the implementation of IoT use cases across industries. Its scalability and flexibility make it suitable for projects of any size, from small prototypes to large-scale deployments."]}),"\n",(0,i.jsxs)(n.p,{children:["We have provided instructions on ",(0,i.jsx)(n.a,{href:"https://wiki.seeedstudio.com/recomputer_r1000_thingsboard_ce/",children:"installing the ThingsBoard Community Edition"})," and the Edge version. You can refer to this wiki lesson for guidance."]}),"\n",(0,i.jsxs)(n.p,{children:["After installing ThingsBoard, you need to add a device. ",(0,i.jsx)(n.a,{href:"https://wiki.seeedstudio.com/recomputer_r1000_thingsboard_dashboard/",children:"This lesson"})," also explains how to create widgets and build dashboards using MQTT credentials. When adding a device, specify the client name in the device configuration and ensure the client name and broker settings in the above code match your ThingsBoard platform configuration."]}),"\n",(0,i.jsxs)(n.p,{children:["Since this is a demo, ",(0,i.jsx)(n.strong,{children:"we have not added a username or password when creating the device"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'BROKER = "192.168.8.195"  # Replace with your MQTT broker\'s IP address\nCLIENT_ID = "Car_Park"     # Replace with your client ID\n'})}),"\n",(0,i.jsx)(n.h2,{id:"demo",children:"Demo"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"demo",src:t(4357).Z+"",width:"960",height:"540"})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4357:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/demo-thingsboard-8b73ba7e49e23c2a6a78099a2b3e1710.gif"},1588:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/labeling-9f0fee65be2c2330afadbb980b0c3c96.PNG"},3557:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/roboflowapi-b3220961584add224372398291687a35.PNG"},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var i=t(7294);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);