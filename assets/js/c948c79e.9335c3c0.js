"use strict";(self.webpackChunktutorial_of_ai_kit=self.webpackChunktutorial_of_ai_kit||[]).push([[471],{541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(5893),s=t(1151);const a={sidebar_position:2},r="Let's create a project.",o={id:"Chapter_6-RaspberryPi_and_AIoT/A_Simple_Project_with_Ollama",title:"Let's create a project.",description:"We want to create an app where the user enters a country's name and gets, as an output, the distance in km from the capital city of such a country and the app's location (for simplicity, We will use Santiago, Chile, as the app location).",source:"@site/../articles/Chapter_6-RaspberryPi_and_AIoT/A_Simple_Project_with_Ollama.md",sourceDirName:"Chapter_6-RaspberryPi_and_AIoT",slug:"/Chapter_6-RaspberryPi_and_AIoT/A_Simple_Project_with_Ollama",permalink:"/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_6-RaspberryPi_and_AIoT/A_Simple_Project_with_Ollama",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"SLMs: Optimization Techniques",permalink:"/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_6-RaspberryPi_and_AIoT/Retrieval_Augmented_Generation_Project"},next:{title:"Smart Retail with reComputerR11 and AI kit",permalink:"/Tutorial-of-AI-Kit-with-Raspberry-Pi-From-Zero-to-Hero/docs/Chapter_6-RaspberryPi_and_AIoT/Smart_Retail_with_reComputerR11_and_AIkit"}},l={},c=[{value:"Install Necessary Packages",id:"install-necessary-packages",level:2},{value:"1.  Importing Libraries",id:"1--importing-libraries",level:2},{value:"2.  Defining Input and Model",id:"2--defining-input-and-model",level:2},{value:"3.  Defining the Response Data Structure",id:"3--defining-the-response-data-structure",level:2},{value:"4.  Setting Up the OpenAI Client",id:"4--setting-up-the-openai-client",level:3},{value:"5.  Generating the Response",id:"5--generating-the-response",level:2},{value:"6.  Calculating the Distance",id:"6--calculating-the-distance",level:2},{value:"Adding images",id:"adding-images",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lets-create-a-project",children:"Let's create a project."}),"\n",(0,i.jsxs)(n.p,{children:["We want to create an ",(0,i.jsx)(n.em,{children:"app"})," where the user enters a country's name and gets, as an output, the distance in km from the capital city of such a country and the app's location (for simplicity, We will use Santiago, Chile, as the app location)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(2330).Z+"",width:"740",height:"261"})}),"\n",(0,i.jsxs)(n.p,{children:["Once the user enters a country name, the model will return the name of its capital city (as a string) and the latitude and longitude of such city (in float). Using those coordinates, we can use a simple Python library (",(0,i.jsx)(n.a,{href:"https://pypi.org/project/haversine/",children:"haversine"}),") to calculate the distance between those 2 points."]}),"\n",(0,i.jsx)(n.p,{children:"The idea of this project is to demonstrate a combination of language model interaction (IA), structured data handling with Pydantic, and geospatial calculations using the Haversine formula (traditional computing)."}),"\n",(0,i.jsxs)(n.p,{children:["First, let us install some libraries. Besides ",(0,i.jsx)(n.em,{children:"Haversine"}),", the main one is the ",(0,i.jsx)(n.a,{href:"https://github.com/openai/openai-python",children:"OpenAI Python library"}),", which provides convenient access to the OpenAI REST API from any Python 3.7+ application. The other one is ",(0,i.jsx)(n.a,{href:"https://docs.pydantic.dev/latest/",children:"Pydantic"})," (and instructor), a robust data validation and settings management library engineered by Python to enhance the robustness and reliability of our codebase. In short, ",(0,i.jsx)(n.em,{children:"Pydantic"})," will help ensure that our model's response will always be consistent."]}),"\n",(0,i.jsx)(n.h2,{id:"install-necessary-packages",children:"Install Necessary Packages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install haversine\npip install openai \npip install pydantic \npip install instructor\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, we should create a Python script designed to interact with our model (LLM) to determine the coordinates of a country's capital city and calculate the distance from Santiago de Chile to that capital."}),"\n",(0,i.jsx)(n.p,{children:"Let's go over the code:"}),"\n",(0,i.jsx)(n.h2,{id:"1--importing-libraries",children:"1.  Importing Libraries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import sys\nfrom haversine import haversine\nfrom openai import OpenAI\nfrom pydantic import BaseModel, Field\nimport instructor\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"sys"}),": Provides access to system-specific parameters and functions. It's used to get command-line arguments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"haversine"}),": A function from the haversine library that calculates the distance between two geographic points using the Haversine formula."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"openAI"}),": A module for interacting with the OpenAI API (although it's used in conjunction with a local setup, Ollama). Everything is off-line here."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pydantic"}),": Provides data validation and settings management using Python-type annotations. It's used to define the structure of expected response data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"instructor"}),": A module is used to patch the OpenAI client to work in a specific mode (likely related to structured data handling)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2--defining-input-and-model",children:"2.  Defining Input and Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"country = sys.argv[1]  \t\t# Get the country from command-line arguments\nMODEL = 'phi3.5:3.8b'     # The name of the model to be used\nmylat = -33.33         \t\t# Latitude of Santiago de Chile\nmylon = -70.51        \t\t# Longitude of Santiago de Chile\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"country"}),": On a Python script, getting the country name from command-line arguments is possible. On a Jupyter notebook, we can enter its name, for example,"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'country = "France"'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MODEL"}),": Specifies the model being used, which is, in this example, the phi3.5."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"mylat"})," ",(0,i.jsx)(n.strong,{children:"and"})," ",(0,i.jsx)(n.strong,{children:"mylon"}),": Coordinates of Santiago de Chile, used as the starting point for the distance calculation."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3--defining-the-response-data-structure",children:"3.  Defining the Response Data Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class CityCoord(BaseModel):\n    city: str = Field(..., description="Name of the city")\n    lat: float = Field(..., description="Decimal Latitude of the city")\n    lon: float = Field(..., description="Decimal Longitude of the city")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CityCoord"}),": A Pydantic model that defines the expected structure of the response from the LLM. It expects three fields: city (name of the city), lat (latitude), and lon (longitude)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4--setting-up-the-openai-client",children:"4.  Setting Up the OpenAI Client"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'client = instructor.patch(\n    OpenAI(\n        base_url="http://localhost:11434/v1",  # Local API base URL (Ollama)\n        api_key="ollama",                      # API key (not used)\n    ),\n    mode=instructor.Mode.JSON,                 # Mode for structured JSON output\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenAI"}),": This setup initializes an OpenAI client with a local base URL and an API key (ollama). It uses a local server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"instructor.patch"}),": Patches the OpenAI client to work in JSON mode, enabling structured output that matches the Pydantic model."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5--generating-the-response",children:"5.  Generating the Response"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'resp = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\n            "role": "user",\n            "content": f"return the decimal latitude and decimal longitude \\\n            of the capital of the {country}."\n        }\n    ],\n    response_model=CityCoord,\n    max_retries=10\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"client.chat.completions.create"}),": Calls the LLM to generate a response."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"model"}),": Specifies the model to use (llava-phi3)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"messages"}),": Contains the prompt for the LLM, asking for the latitude and longitude of the capital city of the specified country."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"response_model"}),": Indicates that the response should conform to the CityCoord model."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"max_retries"}),": The maximum number of retry attempts if the request fails."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6--calculating-the-distance",children:"6.  Calculating the Distance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"distance = haversine((mylat, mylon), (resp.lat, resp.lon), unit='km')\nprint(f\"Santiago de Chile is about {int(round(distance, -1)):,} \\\n        kilometers away from {resp.city}.\")\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"haversine"}),": Calculates the distance between Santiago de Chile and the capital city returned by the LLM using their respective coordinates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"(mylat, mylon)"}),": Coordinates of Santiago de Chile."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"resp.city"}),": Name of the country's capital"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"(resp.lat, resp.lon)"}),": Coordinates of the capital city are provided by the LLM response."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"unit='km'"}),": Specifies that the distance should be calculated in kilometers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"print"}),": Outputs the distance, rounded to the nearest 10 kilometers, with thousands of separators for readability."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Running the code"})}),"\n",(0,i.jsx)(n.p,{children:"If we enter different countries, for example, France, Colombia, and the United States,  We can note that we always receive the same structured information:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Santiago de Chile is about 8,060 kilometers away from Washington, D.C..\nSantiago de Chile is about 4,250 kilometers away from Bogot\xe1.\nSantiago de Chile is about 11,630 kilometers away from Paris.\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you run the code as a script, the result will be printed on the terminal:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(8128).Z+"",width:"740",height:"325"})}),"\n",(0,i.jsx)(n.p,{children:"And the calculations are pretty good!"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(6485).Z+"",width:"1801",height:"681"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.a,{href:"https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OLLAMA_SLMs/20-Ollama_Function_Calling.ipynb",children:"20-Ollama_Function_Calling"})," notebook, it is possible to find experiments with all models installed."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adding-images",children:"Adding images"}),"\n",(0,i.jsx)(n.p,{children:"Now it is time to wrap up everything so far! Let's modify the script so that instead of entering the country name (as a text), the user enters an image, and the application (based on SLM) returns the city in the image and its geographic location. With those data, we can calculate the distance as before."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(8452).Z+"",width:"740",height:"189"})}),"\n",(0,i.jsx)(n.p,{children:"For simplicity, we will implement this new code in two steps. First, the LLM will analyze the image and create a description (text). This text will be passed on to another instance, where the model will extract the information needed to pass along."}),"\n",(0,i.jsx)(n.p,{children:"We will start importing the libraries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import sys\nimport time\nfrom haversine import haversine\nimport ollama\nfrom openai import OpenAI\nfrom pydantic import BaseModel, Field\nimport instructor\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can see the image if you run the code on the Jupyter Notebook. For that we need also import:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nfrom PIL import Image\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Those libraries are unnecessary if we run the code as a script."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now, we define the model and the local coordinates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"MODEL = 'llava-phi3:3.8b'\nmylat = -33.33\nmylon = -70.51\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can download a new image, for example, Machu Picchu from Wikipedia. On the Notebook we can see it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Load the image\nimg_path = "image_test_3.jpg"\nimg = Image.open(img_path)\n\n# Display the image\nplt.figure(figsize=(8, 8))\nplt.imshow(img)\nplt.axis(\'off\')\n#plt.title("Image")\nplt.show()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(1470).Z+"",width:"640",height:"480"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, let's define a function that will receive the image and will ",(0,i.jsx)(n.code,{children:"return the decimal latitude and decimal longitude of the city in the image, its name, and what country it is located"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def image_description(img_path):\n    with open(img_path, 'rb') as file:\n        response = ollama.chat(\n            model=MODEL,\n            messages=[\n              {\n                'role': 'user',\n                'content': '''return the decimal latitude and decimal longitude \n                              of the city in the image, its name, and \n                              what country it is located''',\n                'images': [file.read()],\n              },\n            ],\n            options = {\n              'temperature': 0,\n              }\n      )\n    #print(response['message']['content'])\n    return response['message']['content']\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"We can print the entire response for debug purposes."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The image description generated for the function will be passed as a prompt for the model again."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'start_time = time.perf_counter()  # Start timing\n\nclass CityCoord(BaseModel):\n    city: str = Field(..., description="Name of the city in the image")\n    country: str = Field(..., description="""Name of the country where"\n                                             the city in the image is located\n                                             """)\n    lat: float = Field(..., description="""Decimal Latitude of the city in"\n                                            the image""")\n    lon: float = Field(..., description="""Decimal Longitude of the city in"\n                                           the image""")\n\n# enables `response_model` in create call\nclient = instructor.patch(\n    OpenAI(\n        base_url="http://localhost:11434/v1",\n        api_key="ollama"\n    ),\n    mode=instructor.Mode.JSON,\n)\n\nimage_description = image_description(img_path)\n# Send this description to the model\nresp = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\n            "role": "user",\n            "content": image_description,\n        }\n    ],\n    response_model=CityCoord,\n    max_retries=10,\n    temperature=0,\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"If we print the image description , we will get:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"The image shows the ancient city of Machu Picchu, located in Peru. The city is\nperched on a steep hillside and consists of various structures made of stone. It \nis surrounded by lush greenery and towering mountains. The sky above is blue with\nscattered clouds. \n\nMachu Picchu's latitude is approximately 13.5086\xb0 S, and its longitude is around\n72.5494\xb0 W.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And the second response from the model  (",(0,i.jsx)(n.code,{children:" resp"}),") will be:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"CityCoord(city='Machu Picchu', country='Peru', lat=-13.5086, lon=-72.5494)\n"})}),"\n",(0,i.jsx)(n.p,{children:'Now, we can do a "Post-Processing", calculating the distance and preparing the final answer:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'distance = haversine((mylat, mylon), (resp.lat, resp.lon), unit=\'km\')\n\nprint(f"\\n The image shows {resp.city}, with lat:{round(resp.lat, 2)} and \\\n      long: {round(resp.lon, 2)}, located in {resp.country} and about \\\n            {int(round(distance, -1)):,} kilometers away from \\\n            Santiago, Chile.\\n")\n\nend_time = time.perf_counter()  # End timing\nelapsed_time = end_time - start_time  # Calculate elapsed time\nprint(f" [INFO] ==> The code (running {MODEL}), took {elapsed_time:.1f} \\\n      seconds to execute.\\n")\n'})}),"\n",(0,i.jsx)(n.p,{children:"And we will get:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:" The image shows Machu Picchu, with lat:-13.16 and long: -72.54, located in Peru\n and about 2,250 kilometers away from Santiago, Chile.\n\n [INFO] ==> The code (running llava-phi3:3.8b), took 491.3 seconds to execute.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.a,{href:"https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OLLAMA_SLMs/30-Function_Calling_with_images.ipynb",children:"30-Function_Calling_with_images"})," notebook, it is possible to find the experiments with multiple images."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's now download the script  ",(0,i.jsx)(n.code,{children:"calc_distance_image.py"})," from the ",(0,i.jsx)(n.a,{href:"https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OLLAMA_SLMs/calc_distance_image.py",children:"GitHub"})," and run it on the terminal with the command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python calc_distance_image.py /home/mjrovai/Documents/OLLAMA/image_test_3.jpg\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enter with the Machu Picchu image full patch as an argument. We will get the same previous result."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(58).Z+"",width:"1013",height:"365"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"How"})," about Paris?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(853).Z+"",width:"1024",height:"365"})}),"\n",(0,i.jsxs)(n.p,{children:["Of course, there are many ways to optimize the code used here. Still, the idea is to explore the considerable potential of ",(0,i.jsx)(n.em,{children:"function calling"})," with SLMs at the edge, allowing those models to integrate with external functions or APIs. Going beyond text generation, SLMs can access real-time data, automate tasks, and interact with various systems."]}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OLLAMA_SLMs/calc_distance_image.py",children:"calc_distance_image python script"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},58:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/app-machu-picchu-de8e87a94719312a2bb5c6fcd89522f8.png"},8452:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/block-2-16909ba15526276e2a1285be1791f09e.png"},2330:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/block-fc-proj-c17d63c09b89040c7a9e05eb5a56c1cf.png"},6485:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/calc_real-88046998d3c985fd4747dcfb7ce5862c.png"},1470:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/image_test_3-09e8c6e462363956dbb1b0a807c39b3a.jpg"},853:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/paris-app-d1b03c5b7027d271da3ca380bb55147f.png"},8128:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/script-fc-a23c992403bc33d7eeea3c22e4c8f0ea.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(7294);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);